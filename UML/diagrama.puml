@startuml TODO_app
' Definici√≥n de clases
class Sistema {
  - tareas: List<Tarea>
  - gestorTareas: GestorTareas
  - visualizador: Visualizador
  - estadisticas: Estadisticas
  - persistencia: IPersistencia
  + agregarTarea(idTarea: string ): void
  + eliminarTarea(idTarea: string): void
  + editarTarea(estrategia: IEstrategiaEdicion, idTarea: string, nuevoValor: any): void
  + buscarTareas(estrategia: EstrategiaBusqueda, valorBusqueda: T): void
  + ordenarTareas(metodoOrdenamiento: EstrategiaOrdenamiento): void
  + generarEstadisticas(): void
  + obtenerTareas(): List<Tarea>
  + cargarTareas(): void
}


class Tarea {
  -id:string
  - titulo: string
  - descripcion: string
  - fechaVencimiento: Date
  - prioridad: prioridad
  - etiquetas: List<string>
  - categoria: categorias
  - porcentajeAvance: int
  + getters_y_setters
  + marcarCompletada(): void
}

class GestorTareas {
  + agregarTarea(tareas: List<Tarea>, idTarea:string ): void
  + eliminarTarea(tareas: List<Tarea>, idTarea: string): void
  + editarTarea(estrategia: IEstrategiaEdicion, tarea: Tarea, nuevoValor: any): void
  - buscarTareaPorId(tareas: List<Tarea>, idTarea: string): Tarea
}

interface IEstrategiaEdicion {
  + editar(tarea: Tarea,nuevoValor: any): void
}

class EditarTitulo implements IEstrategiaEdicion {
  + editar(tarea: Tarea, nuevoValor: string ): void
}

class EditarDescripcion implements IEstrategiaEdicion {
  + editar(tarea: Tarea, nuevoValor: string): void
}

class EditarFecha implements IEstrategiaEdicion {
  + editar(tarea: Tarea, nuevoValor: Date): void
}

class EditarPorcentaje implements IEstrategiaEdicion {
  + editar(tarea: Tarea, nuevoValor: number): void
}

class Visualizador {
  + buscarTareas(tareas: List<Tarea>, metodoBusqueda: EstrategiaBusqueda, valorBusqueda: T): List<Tarea>
  + ordenarTareas(tareas: List<Tarea>, metodoOrdenamiento: EstrategiaOrdenamiento): List<Tarea>
}


interface EstrategiaBusqueda {
  + buscar(tareas: List<Tarea>, valorBusqueda: T): List<Tarea>
}

class BuscarPorTitulo implements EstrategiaBusqueda {
  + buscar(tareas: List<Tarea>, valorBusqueda: string): List<Tarea>
}

class BuscarPorFechaVencimiento implements EstrategiaBusqueda {
  + buscar(tareas: List<Tarea>, valorBusqueda: Date): List<Tarea>
}

interface EstrategiaOrdenamiento {
  + ordenar(tareas: List<Tarea>): List<Tarea>
}

class OrdenarPorPrioridad implements EstrategiaOrdenamiento {
  + ordenar(tareas: List<Tarea>): List<Tarea>
}

class OrdenarPorFecha implements EstrategiaOrdenamiento {
  + ordenar(tareas: List<Tarea>): List<Tarea>
}

class Estadisticas {
  + calcularProgreso(tareas: List<Tarea>): number
  + calcularTareasCompletadas(tareas: List<Tarea>): number
  + calcularTiempoDedicado(tareas: List<Tarea>): number
}

interface IPersistencia {
  + guardar(tareas: List<Tarea>): void
  + cargar(): List<Tarea>
}

class PersistenciaJSON implements IPersistencia {
  + guardar(tareas: List<Tarea>): void
  + cargar(): List<Tarea>
}

'ENUM
enum prioridad{
  ALTA
    MEDIA
    BAJA
  }
  enum categorias{
    TRABAJO
    PERSONAL
    RECADO
    OTRO
  }



  ' Relaciones
  Sistema *-- Tarea
  Sistema *-- GestorTareas
  Sistema *-- Visualizador
  Sistema *-- Estadisticas
  Sistema o-- IPersistencia

  GestorTareas <-- IEstrategiaEdicion

  Visualizador <-- EstrategiaBusqueda
  Visualizador <-- EstrategiaOrdenamiento

  @enduml